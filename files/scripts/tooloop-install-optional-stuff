#!/bin/bash

# Heavily borrowed from raspi-config
# https://github.com/asb/raspi-config


if [ $EUID != 0 ]; then
  echo "The installer needs root privileges."
  echo "Please run with sudo:"
  echo "sudo tooloop-install-optional-stuff"
  exit $exit_code
    exit 1
fi


function calc_wt_size {
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
  # output from tput. However in this case, tput detects neither stdout or 
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=15
  WT_WIDTH=$(tput cols)


  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 100 ]; then
    WT_WIDTH=75
  fi
  if [ "$WT_WIDTH" -gt 100 ]; then
    WT_WIDTH=100
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}


# ------------------------------------------------------------------------------
# Install functions
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# AMD drivers
# ------------------------------------------------------------------------------
function install_amd_drivers {
  whiptail --msgbox "Not yet :-(" $WT_HEIGHT $WT_WIDTH

  # Installation manual
  # https://support.amd.com/en-us/kb-articles/Pages/AMDGPU-PRO-Install.aspx
  
  # downlaod the driver
  # wget https://www2.ati.com/drivers/linux/ubuntu/amdgpu-pro-17.10-450821.tar.xz
  
  # extract it
  tar xf amdgpu-pro-17.10-450821.tar.xz

  # run the installer
  ./amdgpu-pro-17.10-450821/amdgpu-pro-install

  # move drivers in the right places
  # https://community.amd.com/message/2769317
  ln -s /opt/amdgpu-pro/lib/x86_64-linux-gnu/dri/radeonsi_drv_video.so /usr/lib/x86_64-linux-gnu/dri/amdgpu_drv_video.so
  cp /opt/amdgpu-pro/lib/x86_64-linux-gnu/vdpau/*.* /usr/lib/x86_64-linux-gnu/vdpau/

  # TODO: possibly necessary (https://forum.ubuntuusers.de/topic/amd-athlon-5350-apu-und-radeon-treiber/)
  # dpkg-reconfigure xserver-xorg
  # update-initramfs -u -k all

  usermod -a -G video tooloop
}

# ------------------------------------------------------------------------------
# Nvidia drivers
# ------------------------------------------------------------------------------
function install_nvidia_drivers {
  echo "-----------------------------------------------------------------------"
  echo "Checking latest version..."
  echo "-----------------------------------------------------------------------"
  NVIDIA_VERSION=$(curl -s https://download.nvidia.com/XFree86/Linux-x86_64/latest.txt | awk '{print $1;}')
  echo " "
  echo "It’s $NVIDIA_VERSION"
  echo " "

  echo "-----------------------------------------------------------------------"
  echo "Downloading driver..."
  echo "-----------------------------------------------------------------------"
  wget http://us.download.nvidia.com/XFree86/Linux-x86_64/${NVIDIA_VERSION}/NVIDIA-Linux-x86_64-${NVIDIA_VERSION}.run
  chmod +x NVIDIA-Linux-x86_64-${NVIDIA_VERSION}.run


  echo "-----------------------------------------------------------------------"
  echo "Disabling Nouveau..."
  echo "-----------------------------------------------------------------------"
  cat >/etc/modprobe.d/nvidia-installer-disable-nouveau.conf <<EOF
# generated by nvidia-installer
blacklist nouveau
options nouveau modeset=0
EOF
  update-initramfs -u
echo " "

  # Set up installer after reboot
  cat >/opt/tooloop/install_tasks.sh <<EOF
# run the driver installer
echo "Starting Nvidia installer..."
sudo /home/tooloop/NVIDIA-Linux-x86_64-${NVIDIA_VERSION}.run

# repair link so we can compile GL stuff
cd /usr/lib
ln -s libGL.so.1 libGL.so 

# remove install script
mv /opt/tooloop/install_tasks.sh /opt/tooloop/install_tasks.sh_DONE 

reboot
EOF

  # ------------------------------------------------------------------------------
  # Reboot and install driver
  # ------------------------------------------------------------------------------
  sleep 1
  echo "We will now reboot with all old drivers disbled."
  echo "New driver will install right when we’re back."
  sleep 5
  reboot
}



# ------------------------------------------------------------------------------
# openframeworks
# ------------------------------------------------------------------------------
function install_of {
  OF_VERSION="0.9.8"
  wget http://openframeworks.cc/versions/v${OF_VERSION}/of_v${OF_VERSION}_linux64_release.tar.gz --no-check-certificate
  tar xf of_v${OF_VERSION}_linux64_release.tar.gz
  mv of_v${OF_VERSION}_linux64_release /assets/presentation/openframeworks
  /assets/presentation/openframeworks/scripts/linux/ubuntu/install_dependencies.sh
  /assets/presentation/openframeworks/scripts/linux/ubuntu/install_codecs.sh
  /assets/presentation/openframeworks/scripts/linux/compileOF.sh -j3
  chown -R tooloop:tooloop /assets/presentation/openframeworks
  rm of_v${OF_VERSION}_linux64_release.tar.gz
}



# ------------------------------------------------------------------------------
# Kivy
# ------------------------------------------------------------------------------
function install_kivy {
  add-apt-repository ppa:kivy-team/kivy
  apt update
  apt -y install python3-kivy
  apt -y install python-kivy-examples
  mv /usr/share/kivy-examples /assets/presentation
  chown -R tooloop:tooloop /assets/presentation/kivy-examples
}

# ------------------------------------------------------------------------------
# Transparent cursor
# ------------------------------------------------------------------------------
function install_transparent_cursor {
  # TODO: check if already installed, if so, offer uninstall
  # get rep
  git clone https://github.com/vollstock/xcursor-transparent-cursor.git /tmp/xcursor-transparent-cursor
  # generate cursors
  /tmp/xcursor-transparent-cursor/gen.sh
  # install them
  mkdir -p /home/tooloop/.icons
  mv /tmp/xcursor-transparent-cursor /home/tooloop/.icons/default
  # restart openbox for immediate effect
  openbox --restart
  # clean up
  chown -R tooloop:tooloop /home/tooloop/.icons
}



# ------------------------------------------------------------------------------
# Processing
# ------------------------------------------------------------------------------
function install_processing {
  PROCESSING_VERSION="3.3.6"
  # Download Processing for Linux 64-bit
  wget --no-check-certificate http://download.processing.org/processing-${PROCESSING_VERSION}-linux64.tgz
  # Unpack the downloaded package to the `/assets` drive
  tar xvzf processing-${PROCESSING_VERSION}-linux64.tgz
  mv processing-${PROCESSING_VERSION} /assets/presentation
  rm processing-${PROCESSING_VERSION}-linux64.tgz
}



# ------------------------------------------------------------------------------
# GStreamer
# ------------------------------------------------------------------------------
function install_gstreamer {
  echo "Getting packages..."
  apt -y install mpg123 libmpg123-dev gstreamer1.0 gstreamer1.0-doc gstreamer1.0-tools  gstreamer1.0-alsa gstreamer1.0-libav gstreamer1.0-pulseaudio gstreamer1.0-plugins-base gstreamer1.0-plugins-base-doc gstreamer1.0-plugins-base-dbg gstreamer1.0-plugins-good gstreamer1.0-plugins-good-doc gstreamer1.0-plugins-good-dbg gstreamer1.0-plugins-bad gstreamer1.0-plugins-bad-doc gstreamer1.0-plugins-bad-dbg gstreamer1.0-plugins-ugly gstreamer1.0-plugins-ugly-doc gstreamer1.0-plugins-ugly-dbg gstreamer1.0-vaapi gstreamer1.0-vaapi-doc gstreamer1.0-x libgstreamer1.0-0 libgstreamer1.0-0-dbg libgstreamer1.0-dev
  apt -y install va-driver-all libva-glx1 libva-x11-1 vainfo vainfo
}



# ------------------------------------------------------------------------------
# Open Lighting Architecture
# ------------------------------------------------------------------------------
function install_ola {
  OLA_VERSION="0.10.5"
  # install dependencies
  apt -y install libcppunit-dev libcppunit-1.13-0v5 uuid-dev pkg-config libncurses5-dev libtool autoconf automake g++ libmicrohttpd-dev libmicrohttpd10 protobuf-compiler libprotobuf-lite9v5 python-protobuf libprotobuf-dev libprotoc-dev zlib1g-dev bison flex make libftdi-dev libftdi1 libusb-1.0-0-dev liblo-dev libavahi-client-dev python-numpy

  # download latest tarball
  wget https://github.com/OpenLightingProject/ola/releases/download/${OLA_VERSION}/ola-${OLA_VERSION}.tar.gz

  # extract it
  tar -zxf ola-${OLA_VERSION}.tar.gz
  cd ola-${OLA_VERSION}
  autoreconf -i

  # enable python libs for Kivy
  ./configure --enable-python-libs

  # build it
  make -j 4
  make check
  make install
  ldconfig


  # Create a systemd service
  mkdir -p /usr/lib/systemd/system/
  cat > /usr/lib/systemd/system/olad.service <<EOF
[Unit]
Description=Open Lighting Architecture daemon
After=network.target

[Service]
User=tooloop
ExecStart=/usr/local/bin/olad
Restart=always

[Install]
WantedBy=multi-user.target
EOF

  # Enable the service
  systemctl enable olad

  # Start the service
  systemctl start olad
}



# ------------------------------------------------------------------------------
# System update
# ------------------------------------------------------------------------------
function system_update {
  apt -y update && apt -y upgrade
}



# ------------------------------------------------------------------------------
# Check command line parameters
# ------------------------------------------------------------------------------
if [ $1 ]; then

  case $1 in
      openframeworks) install_of ;;
      processing) install_processing ;;
      kivy) install_kivy ;;
      transparent-cursor) install_transparent_cursor ;;
      gstreamer) install_gstreamer ;;
      ola) install_ola ;;
      update) system_update ;;
  esac

else

  # ------------------------------------------------------------------------------
  # Print menu
  # ------------------------------------------------------------------------------

  calc_wt_size
  while true; do
    FUN=$(whiptail --title "Tooloop OS optional stuff" --menu "What do you want to install?" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Exit --ok-button Install \
      "1 openframeworks" "openframeworks 0.9.8 C++ media framework" \
      "2 Processing" "Processing 3.3.6 Java media framework" \
      "3 Kivy" "Kivy python NUI framework" \
      "4 Transparent cursor" "For touch displays" \
      "5 GStreamer" "Gstreamer video components" \
      "6 OLA" "Open Lighting Architecture" \
      "7 System update" "UBUNTU system update" \
      "8 Nvidia drivers" "Graphics drivers for Nvidia cards" \
      3>&1 1>&2 2>&3)
      # "7 AMD drivers" "Graphics drivers for FirePro series" \
    RET=$?
    if [ $RET -eq 1 ]; then
      exit 0
    elif [ $RET -eq 0 ]; then
      case "$FUN" in
        1\ *) install_of ;;
        2\ *) install_processing ;;
        3\ *) install_kivy ;;
        4\ *) install_transparent_cursor ;;
        5\ *) install_gstreamer ;;
        6\ *) install_ola ;;
        7\ *) system_update ;;
        8\ *) install_nvidia_drivers ;;
        # 7\ *) install_amd_drivers ;;
        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    else
      exit 1
    fi
  done
  
fi # end command line parameter